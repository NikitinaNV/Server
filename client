"""

Nikitina N.V.
Client

"""

from time import time
import socket


class Client:

    def __init__(self, host, port, timeout=None):
        try:
            self.socket = socket.create_connection((host, port), timeout)
        except socket.error:
            pass

    def get_data(self):
        answer = "\n\n"
        answer.encode("utf8")

        answ = bytearray()
        while True:
            data = self.socket.recv(1024)
            if not data:
                raise ClientError
            answ.extend(data)
            if answ[-2:] == answer:
                break

        if not data.startswith(b'ok\n'):
            raise ClientError

        inf_str = data.decode()
        data_output(inf_str)

    def data_output(self, inf_str):
        list_inf = inf_str.split("\n", 1)
        begin_with = list_inf[0]

        if begin_with == "error":
            raise ClientError

        return inf_str

    def put(self, key, value, timestamp=None):
        if timestamp == timestamp:
            timestamp = int(time())
        try:
            metrika = f"put {key} {value} {timestamp}\n"
            metrika.encode("utf8")
            self.socket.sendall(metrika)
        except socket.error:
            raise ClientError

        data = self.recv()

        if data == b'ok\n\n':
            pass
        elif data == b'error\nwrong command\n\n':
            raise ClientError

    def recv(self):
        try:
            return self.socket.recv(1024)
        except socket.error:
            raise ClientError

    def get(self, key):
        request = f"get {key}\n"
        request.encode("utf8")
        try:
            self.socket.sendall(request)
        except socket.error:
            raise ClientError
        inf_str = self.get_data()

        dict_of_data = dict()
        if not inf_str:
            return {}
        else:
            list_of_inf = inf_str.split("\n")
            for i in list_of_inf:
                one_inf = i.split()
                key = one_inf[0]
                value = one_inf[1]
                timestamp = one_inf[2]
                if key not in dict_of_data:
                    dict_of_data[key] = list()
                dict_of_data[key].append((int(timestamp), float(value)))
            for key, list_metric in dict_of_data.items():
                dict_of_data[key] = sorted(list_metric, key=lambda x: x[0])
            return dict_of_data


class ClientError:
    pass
